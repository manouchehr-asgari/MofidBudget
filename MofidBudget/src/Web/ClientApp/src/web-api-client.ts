//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import followIfLoginRedirect from './components/api-authorization/followIfLoginRedirect';

export class BeneficiariesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBeneficiaries(pageSize: number | undefined, pageNumber: number | undefined): Promise<PaginatedListOfBeneficiaryDto> {
        let url_ = this.baseUrl + "/api/Beneficiaries?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBeneficiaries(_response);
        });
    }

    protected processGetBeneficiaries(response: Response): Promise<PaginatedListOfBeneficiaryDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfBeneficiaryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfBeneficiaryDto>(null as any);
    }

    createBeneficiary(command: CreateBeneficiaryCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Beneficiaries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBeneficiary(_response);
        });
    }

    protected processCreateBeneficiary(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    getBeneficiaryByGroup(command: GetBeneficiariesByGroupWithPaginationQuery): Promise<PaginatedListOfBeneficiaryDto> {
        let url_ = this.baseUrl + "/api/Beneficiaries/BeneficiaryByGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBeneficiaryByGroup(_response);
        });
    }

    protected processGetBeneficiaryByGroup(response: Response): Promise<PaginatedListOfBeneficiaryDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfBeneficiaryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfBeneficiaryDto>(null as any);
    }

    getBeneficiaryByType(command: GetBeneficiariesByTypeWithPaginationQuery): Promise<PaginatedListOfBeneficiaryDto> {
        let url_ = this.baseUrl + "/api/Beneficiaries/BeneficiaryByType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBeneficiaryByType(_response);
        });
    }

    protected processGetBeneficiaryByType(response: Response): Promise<PaginatedListOfBeneficiaryDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfBeneficiaryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfBeneficiaryDto>(null as any);
    }

    updateBeneficiary(id: number, command: UpdateBeneficiaryCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Beneficiaries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBeneficiary(_response);
        });
    }

    protected processUpdateBeneficiary(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteBeneficiary(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Beneficiaries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBeneficiary(_response);
        });
    }

    protected processDeleteBeneficiary(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BeneficiaryEmplyeesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBeneficiaryEmplyees(): Promise<BeneficiaryEmplyeeDto[]> {
        let url_ = this.baseUrl + "/api/BeneficiaryEmplyees";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBeneficiaryEmplyees(_response);
        });
    }

    protected processGetBeneficiaryEmplyees(response: Response): Promise<BeneficiaryEmplyeeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BeneficiaryEmplyeeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BeneficiaryEmplyeeDto[]>(null as any);
    }

    createBeneficiaryEmplyee(command: CreateBeneficiaryEmplyeeCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/BeneficiaryEmplyees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBeneficiaryEmplyee(_response);
        });
    }

    protected processCreateBeneficiaryEmplyee(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateBeneficiaryEmplyee(id: number, command: UpdateBeneficiaryEmplyeeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryEmplyees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBeneficiaryEmplyee(_response);
        });
    }

    protected processUpdateBeneficiaryEmplyee(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteBeneficiaryEmplyee(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryEmplyees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBeneficiaryEmplyee(_response);
        });
    }

    protected processDeleteBeneficiaryEmplyee(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BeneficiaryGroupClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBeneficiaryGroups(): Promise<BeneficiaryGroupDto[]> {
        let url_ = this.baseUrl + "/api/BeneficiaryGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBeneficiaryGroups(_response);
        });
    }

    protected processGetBeneficiaryGroups(response: Response): Promise<BeneficiaryGroupDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BeneficiaryGroupDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BeneficiaryGroupDto[]>(null as any);
    }

    createBeneficiaryGroup(command: CreateBeneficiaryGroupCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/BeneficiaryGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBeneficiaryGroup(_response);
        });
    }

    protected processCreateBeneficiaryGroup(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateBeneficiaryGroup(id: number, command: UpdateBeneficiaryGroupCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBeneficiaryGroup(_response);
        });
    }

    protected processUpdateBeneficiaryGroup(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteBeneficiaryGroup(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBeneficiaryGroup(_response);
        });
    }

    protected processDeleteBeneficiaryGroup(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BeneficiaryRelationShipsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBeneficiaryRelationShips(command: GetBeneficiaryRelationShipsWithPaginationQuery): Promise<PaginatedListOfBeneficiaryRelationShipDto> {
        let url_ = this.baseUrl + "/api/BeneficiaryRelationShips";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBeneficiaryRelationShips(_response);
        });
    }

    protected processGetBeneficiaryRelationShips(response: Response): Promise<PaginatedListOfBeneficiaryRelationShipDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfBeneficiaryRelationShipDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfBeneficiaryRelationShipDto>(null as any);
    }

    createBeneficiaryRelationShip(command: CreateBeneficiaryRelationShipCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/BeneficiaryRelationShips";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBeneficiaryRelationShip(_response);
        });
    }

    protected processCreateBeneficiaryRelationShip(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateBeneficiaryRelationShip(id: number, command: UpdateBeneficiaryRelationShipCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryRelationShips/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBeneficiaryRelationShip(_response);
        });
    }

    protected processUpdateBeneficiaryRelationShip(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteBeneficiaryRelationShip(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryRelationShips/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBeneficiaryRelationShip(_response);
        });
    }

    protected processDeleteBeneficiaryRelationShip(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BeneficiaryTypeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBeneficiaryType(): Promise<BeneficiaryTypeDto[]> {
        let url_ = this.baseUrl + "/api/BeneficiaryType";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBeneficiaryType(_response);
        });
    }

    protected processGetBeneficiaryType(response: Response): Promise<BeneficiaryTypeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BeneficiaryTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BeneficiaryTypeDto[]>(null as any);
    }

    createBeneficiaryType(command: CreateBeneficiaryTypeCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/BeneficiaryType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBeneficiaryType(_response);
        });
    }

    protected processCreateBeneficiaryType(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateBeneficiaryType(id: number, command: UpdateBeneficiaryTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBeneficiaryType(_response);
        });
    }

    protected processUpdateBeneficiaryType(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteBeneficiaryType(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/BeneficiaryType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBeneficiaryType(_response);
        });
    }

    protected processDeleteBeneficiaryType(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CostCategoriesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCostCategories(): Promise<CostCategoryDto[]> {
        let url_ = this.baseUrl + "/api/CostCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCostCategories(_response);
        });
    }

    protected processGetCostCategories(response: Response): Promise<CostCategoryDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CostCategoryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCategoryDto[]>(null as any);
    }

    createCostCategory(command: CreateCostCategoryCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/CostCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCostCategory(_response);
        });
    }

    protected processCreateCostCategory(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateCostCategory(id: number, command: UpdateCostCategoryCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CostCategories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCostCategory(_response);
        });
    }

    protected processUpdateCostCategory(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteCostCategory(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CostCategories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCostCategory(_response);
        });
    }

    protected processDeleteCostCategory(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CostGroupsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCostGroups(): Promise<CostGroupDto[]> {
        let url_ = this.baseUrl + "/api/CostGroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCostGroups(_response);
        });
    }

    protected processGetCostGroups(response: Response): Promise<CostGroupDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CostGroupDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostGroupDto[]>(null as any);
    }

    createCostGroup(command: CreateCostGroupCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/CostGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCostGroup(_response);
        });
    }

    protected processCreateCostGroup(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateCostGroup(id: number, command: UpdateCostGroupCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CostGroups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCostGroup(_response);
        });
    }

    protected processUpdateCostGroup(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteCostGroup(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CostGroups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCostGroup(_response);
        });
    }

    protected processDeleteCostGroup(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CostTypesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCostTypes(command: GetCostTypesWithPaginationQuery): Promise<PaginatedListOfCostTypeDto> {
        let url_ = this.baseUrl + "/api/CostTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCostTypes(_response);
        });
    }

    protected processGetCostTypes(response: Response): Promise<PaginatedListOfCostTypeDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfCostTypeDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfCostTypeDto>(null as any);
    }

    createCostType(command: CreateCostTypeCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/CostTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCostType(_response);
        });
    }

    protected processCreateCostType(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateCostType(id: number, command: UpdateCostTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CostTypes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCostType(_response);
        });
    }

    protected processUpdateCostType(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteCostType(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CostTypes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCostType(_response);
        });
    }

    protected processDeleteCostType(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class VouchersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getVouchers(command: GetVouchersWithPaginationQuery): Promise<PaginatedListOfVoucherDto> {
        let url_ = this.baseUrl + "/api/Vouchers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVouchers(_response);
        });
    }

    protected processGetVouchers(response: Response): Promise<PaginatedListOfVoucherDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfVoucherDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfVoucherDto>(null as any);
    }

    createVoucher(command: CreateVoucherCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Vouchers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateVoucher(_response);
        });
    }

    protected processCreateVoucher(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    getVoucherByBeneficiary(command: GetVouchersByBeneficiayWithPaginationQuery): Promise<PaginatedListOfVoucherDto> {
        let url_ = this.baseUrl + "/api/Vouchers/VoucherByBeneficiary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVoucherByBeneficiary(_response);
        });
    }

    protected processGetVoucherByBeneficiary(response: Response): Promise<PaginatedListOfVoucherDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfVoucherDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfVoucherDto>(null as any);
    }

    getVoucherByCostType(command: GetVouchersByCostTypeWithPaginationQuery): Promise<PaginatedListOfVoucherDto> {
        let url_ = this.baseUrl + "/api/Vouchers/VoucherByCostType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVoucherByCostType(_response);
        });
    }

    protected processGetVoucherByCostType(response: Response): Promise<PaginatedListOfVoucherDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfVoucherDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfVoucherDto>(null as any);
    }

    updateVoucher(id: number, command: UpdateVoucherCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Vouchers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateVoucher(_response);
        });
    }

    protected processUpdateVoucher(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteVoucher(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Vouchers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteVoucher(_response);
        });
    }

    protected processDeleteVoucher(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PaginatedListOfBeneficiaryDto implements IPaginatedListOfBeneficiaryDto {
    items?: BeneficiaryDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfBeneficiaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BeneficiaryDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfBeneficiaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfBeneficiaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfBeneficiaryDto {
    items?: BeneficiaryDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class BeneficiaryDto implements IBeneficiaryDto {
    id?: number;
    beneficiaryGroup?: string | undefined;
    title?: string | undefined;
    code?: string | undefined;
    location?: Location;
    created?: Date | undefined;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBeneficiaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.beneficiaryGroup = _data["beneficiaryGroup"];
            this.title = _data["title"];
            this.code = _data["code"];
            this.location = _data["location"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static fromJS(data: any): BeneficiaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new BeneficiaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["beneficiaryGroup"] = this.beneficiaryGroup;
        data["title"] = this.title;
        data["code"] = this.code;
        data["location"] = this.location;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        return data;
    }
}

export interface IBeneficiaryDto {
    id?: number;
    beneficiaryGroup?: string | undefined;
    title?: string | undefined;
    code?: string | undefined;
    location?: Location;
    created?: Date | undefined;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;
}

export enum Location {
    Atlas = 1,
    Shariati = 2,
    Branch = 3,
}

export class GetBeneficiariesByGroupWithPaginationQuery implements IGetBeneficiariesByGroupWithPaginationQuery {
    groupId?: number;
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IGetBeneficiariesByGroupWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): GetBeneficiariesByGroupWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetBeneficiariesByGroupWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IGetBeneficiariesByGroupWithPaginationQuery {
    groupId?: number;
    pageNumber?: number;
    pageSize?: number;
}

export class GetBeneficiariesByTypeWithPaginationQuery implements IGetBeneficiariesByTypeWithPaginationQuery {
    typeId?: number;
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IGetBeneficiariesByTypeWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeId = _data["typeId"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): GetBeneficiariesByTypeWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetBeneficiariesByTypeWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeId"] = this.typeId;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IGetBeneficiariesByTypeWithPaginationQuery {
    typeId?: number;
    pageNumber?: number;
    pageSize?: number;
}

export class CreateBeneficiaryCommand implements ICreateBeneficiaryCommand {
    beneficiaryGroupId?: number;
    beneficiaryTypeId?: number;
    location?: Location;
    code?: string;
    title?: string | undefined;

    constructor(data?: ICreateBeneficiaryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beneficiaryGroupId = _data["beneficiaryGroupId"];
            this.beneficiaryTypeId = _data["beneficiaryTypeId"];
            this.location = _data["location"];
            this.code = _data["code"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateBeneficiaryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBeneficiaryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beneficiaryGroupId"] = this.beneficiaryGroupId;
        data["beneficiaryTypeId"] = this.beneficiaryTypeId;
        data["location"] = this.location;
        data["code"] = this.code;
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateBeneficiaryCommand {
    beneficiaryGroupId?: number;
    beneficiaryTypeId?: number;
    location?: Location;
    code?: string;
    title?: string | undefined;
}

export class UpdateBeneficiaryCommand implements IUpdateBeneficiaryCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
    location?: Location;
    beneficiaryGroupId?: number;
    beneficiaryTypeId?: number;

    constructor(data?: IUpdateBeneficiaryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.code = _data["code"];
            this.location = _data["location"];
            this.beneficiaryGroupId = _data["beneficiaryGroupId"];
            this.beneficiaryTypeId = _data["beneficiaryTypeId"];
        }
    }

    static fromJS(data: any): UpdateBeneficiaryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBeneficiaryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["code"] = this.code;
        data["location"] = this.location;
        data["beneficiaryGroupId"] = this.beneficiaryGroupId;
        data["beneficiaryTypeId"] = this.beneficiaryTypeId;
        return data;
    }
}

export interface IUpdateBeneficiaryCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
    location?: Location;
    beneficiaryGroupId?: number;
    beneficiaryTypeId?: number;
}

export class BeneficiaryEmplyeeDto implements IBeneficiaryEmplyeeDto {
    id?: number;
    beneficiaryId?: number;
    date?: Date | undefined;
    employeeCount?: number;

    constructor(data?: IBeneficiaryEmplyeeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.beneficiaryId = _data["beneficiaryId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.employeeCount = _data["employeeCount"];
        }
    }

    static fromJS(data: any): BeneficiaryEmplyeeDto {
        data = typeof data === 'object' ? data : {};
        let result = new BeneficiaryEmplyeeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["beneficiaryId"] = this.beneficiaryId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["employeeCount"] = this.employeeCount;
        return data;
    }
}

export interface IBeneficiaryEmplyeeDto {
    id?: number;
    beneficiaryId?: number;
    date?: Date | undefined;
    employeeCount?: number;
}

export class CreateBeneficiaryEmplyeeCommand implements ICreateBeneficiaryEmplyeeCommand {
    beneficiaryId?: number;
    date?: Date | undefined;
    employeeCount?: number;

    constructor(data?: ICreateBeneficiaryEmplyeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beneficiaryId = _data["beneficiaryId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.employeeCount = _data["employeeCount"];
        }
    }

    static fromJS(data: any): CreateBeneficiaryEmplyeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBeneficiaryEmplyeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beneficiaryId"] = this.beneficiaryId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["employeeCount"] = this.employeeCount;
        return data;
    }
}

export interface ICreateBeneficiaryEmplyeeCommand {
    beneficiaryId?: number;
    date?: Date | undefined;
    employeeCount?: number;
}

export class UpdateBeneficiaryEmplyeeCommand implements IUpdateBeneficiaryEmplyeeCommand {
    id?: number;
    beneficiaryId?: number;
    date?: Date | undefined;
    employeeCount?: number;

    constructor(data?: IUpdateBeneficiaryEmplyeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.beneficiaryId = _data["beneficiaryId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.employeeCount = _data["employeeCount"];
        }
    }

    static fromJS(data: any): UpdateBeneficiaryEmplyeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBeneficiaryEmplyeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["beneficiaryId"] = this.beneficiaryId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["employeeCount"] = this.employeeCount;
        return data;
    }
}

export interface IUpdateBeneficiaryEmplyeeCommand {
    id?: number;
    beneficiaryId?: number;
    date?: Date | undefined;
    employeeCount?: number;
}

export class BeneficiaryGroupDto implements IBeneficiaryGroupDto {
    id?: number;
    title?: string | undefined;
    code?: string | undefined;
    items?: BeneficiaryDto[];

    constructor(data?: IBeneficiaryGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.code = _data["code"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BeneficiaryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BeneficiaryGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new BeneficiaryGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["code"] = this.code;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBeneficiaryGroupDto {
    id?: number;
    title?: string | undefined;
    code?: string | undefined;
    items?: BeneficiaryDto[];
}

export class CreateBeneficiaryGroupCommand implements ICreateBeneficiaryGroupCommand {
    title?: string;
    code?: string;

    constructor(data?: ICreateBeneficiaryGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateBeneficiaryGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBeneficiaryGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["code"] = this.code;
        return data;
    }
}

export interface ICreateBeneficiaryGroupCommand {
    title?: string;
    code?: string;
}

export class UpdateBeneficiaryGroupCommand implements IUpdateBeneficiaryGroupCommand {
    id?: number;
    title?: string | undefined;
    code?: string;

    constructor(data?: IUpdateBeneficiaryGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UpdateBeneficiaryGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBeneficiaryGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["code"] = this.code;
        return data;
    }
}

export interface IUpdateBeneficiaryGroupCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
}

export class PaginatedListOfBeneficiaryRelationShipDto implements IPaginatedListOfBeneficiaryRelationShipDto {
    items?: BeneficiaryRelationShipDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfBeneficiaryRelationShipDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BeneficiaryRelationShipDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfBeneficiaryRelationShipDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfBeneficiaryRelationShipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfBeneficiaryRelationShipDto {
    items?: BeneficiaryRelationShipDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class BeneficiaryRelationShipDto implements IBeneficiaryRelationShipDto {
    id?: number;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    fromBeneficiaryId?: number;
    toBeneficiaryId?: number;
    isActive?: boolean | undefined;
    percent?: number;
    refractionLevel?: RefractionLevel;

    constructor(data?: IBeneficiaryRelationShipDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : <any>undefined;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : <any>undefined;
            this.fromBeneficiaryId = _data["fromBeneficiaryId"];
            this.toBeneficiaryId = _data["toBeneficiaryId"];
            this.isActive = _data["isActive"];
            this.percent = _data["percent"];
            this.refractionLevel = _data["refractionLevel"];
        }
    }

    static fromJS(data: any): BeneficiaryRelationShipDto {
        data = typeof data === 'object' ? data : {};
        let result = new BeneficiaryRelationShipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["fromBeneficiaryId"] = this.fromBeneficiaryId;
        data["toBeneficiaryId"] = this.toBeneficiaryId;
        data["isActive"] = this.isActive;
        data["percent"] = this.percent;
        data["refractionLevel"] = this.refractionLevel;
        return data;
    }
}

export interface IBeneficiaryRelationShipDto {
    id?: number;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    fromBeneficiaryId?: number;
    toBeneficiaryId?: number;
    isActive?: boolean | undefined;
    percent?: number;
    refractionLevel?: RefractionLevel;
}

export enum RefractionLevel {
    Direct = 1,
    Enabling = 2,
    EnablingTeam = 3,
    ProductAndBranch = 4,
    Tools = 5,
    Bussiness = 6,
}

export class GetBeneficiaryRelationShipsWithPaginationQuery implements IGetBeneficiaryRelationShipsWithPaginationQuery {
    costGroupId?: number;
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IGetBeneficiaryRelationShipsWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costGroupId = _data["costGroupId"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): GetBeneficiaryRelationShipsWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetBeneficiaryRelationShipsWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costGroupId"] = this.costGroupId;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IGetBeneficiaryRelationShipsWithPaginationQuery {
    costGroupId?: number;
    pageNumber?: number;
    pageSize?: number;
}

export class CreateBeneficiaryRelationShipCommand implements ICreateBeneficiaryRelationShipCommand {
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    fromBeneficiaryId?: number;
    toBeneficiaryId?: number | undefined;
    isActive?: boolean | undefined;
    percent?: number | undefined;
    refractionLevel?: RefractionLevel;
    refractionType?: RefractionType;
    toLocation?: Location;
    toBussinessLine?: BussinessLine;

    constructor(data?: ICreateBeneficiaryRelationShipCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : <any>undefined;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : <any>undefined;
            this.fromBeneficiaryId = _data["fromBeneficiaryId"];
            this.toBeneficiaryId = _data["toBeneficiaryId"];
            this.isActive = _data["isActive"];
            this.percent = _data["percent"];
            this.refractionLevel = _data["refractionLevel"];
            this.refractionType = _data["refractionType"];
            this.toLocation = _data["toLocation"];
            this.toBussinessLine = _data["toBussinessLine"];
        }
    }

    static fromJS(data: any): CreateBeneficiaryRelationShipCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBeneficiaryRelationShipCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["fromBeneficiaryId"] = this.fromBeneficiaryId;
        data["toBeneficiaryId"] = this.toBeneficiaryId;
        data["isActive"] = this.isActive;
        data["percent"] = this.percent;
        data["refractionLevel"] = this.refractionLevel;
        data["refractionType"] = this.refractionType;
        data["toLocation"] = this.toLocation;
        data["toBussinessLine"] = this.toBussinessLine;
        return data;
    }
}

export interface ICreateBeneficiaryRelationShipCommand {
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    fromBeneficiaryId?: number;
    toBeneficiaryId?: number | undefined;
    isActive?: boolean | undefined;
    percent?: number | undefined;
    refractionLevel?: RefractionLevel;
    refractionType?: RefractionType;
    toLocation?: Location;
    toBussinessLine?: BussinessLine;
}

export enum RefractionType {
    Location = 1,
    Beneficiary = 2,
    Bussiness = 3,
}

export enum BussinessLine {
    Holding = 1,
    Trading = 2,
    Portfolio = 3,
    Ime = 4,
    Investment = 5,
    Insurance = 6,
}

export class UpdateBeneficiaryRelationShipCommand implements IUpdateBeneficiaryRelationShipCommand {
    id?: number;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    fromBeneficiaryId?: number;
    toBeneficiaryId?: number;
    isActive?: boolean | undefined;
    percent?: number;
    refractionLevel?: RefractionLevel;
    refractionType?: RefractionType;
    toLocation?: Location;

    constructor(data?: IUpdateBeneficiaryRelationShipCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : <any>undefined;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : <any>undefined;
            this.fromBeneficiaryId = _data["fromBeneficiaryId"];
            this.toBeneficiaryId = _data["toBeneficiaryId"];
            this.isActive = _data["isActive"];
            this.percent = _data["percent"];
            this.refractionLevel = _data["refractionLevel"];
            this.refractionType = _data["refractionType"];
            this.toLocation = _data["toLocation"];
        }
    }

    static fromJS(data: any): UpdateBeneficiaryRelationShipCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBeneficiaryRelationShipCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["fromBeneficiaryId"] = this.fromBeneficiaryId;
        data["toBeneficiaryId"] = this.toBeneficiaryId;
        data["isActive"] = this.isActive;
        data["percent"] = this.percent;
        data["refractionLevel"] = this.refractionLevel;
        data["refractionType"] = this.refractionType;
        data["toLocation"] = this.toLocation;
        return data;
    }
}

export interface IUpdateBeneficiaryRelationShipCommand {
    id?: number;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    fromBeneficiaryId?: number;
    toBeneficiaryId?: number;
    isActive?: boolean | undefined;
    percent?: number;
    refractionLevel?: RefractionLevel;
    refractionType?: RefractionType;
    toLocation?: Location;
}

export class BeneficiaryTypeDto implements IBeneficiaryTypeDto {
    id?: number;
    title?: string | undefined;
    items?: BeneficiaryDto[];

    constructor(data?: IBeneficiaryTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BeneficiaryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BeneficiaryTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new BeneficiaryTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBeneficiaryTypeDto {
    id?: number;
    title?: string | undefined;
    items?: BeneficiaryDto[];
}

export class CreateBeneficiaryTypeCommand implements ICreateBeneficiaryTypeCommand {
    title?: string;

    constructor(data?: ICreateBeneficiaryTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateBeneficiaryTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBeneficiaryTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateBeneficiaryTypeCommand {
    title?: string;
}

export class UpdateBeneficiaryTypeCommand implements IUpdateBeneficiaryTypeCommand {
    id?: number;
    title?: string | undefined;

    constructor(data?: IUpdateBeneficiaryTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): UpdateBeneficiaryTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBeneficiaryTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IUpdateBeneficiaryTypeCommand {
    id?: number;
    title?: string | undefined;
}

export class CostCategoryDto implements ICostCategoryDto {
    id?: number;
    title?: string | undefined;
    code?: string | undefined;
    items?: CostGroupDto[];

    constructor(data?: ICostCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.code = _data["code"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CostGroupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CostCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["code"] = this.code;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICostCategoryDto {
    id?: number;
    title?: string | undefined;
    code?: string | undefined;
    items?: CostGroupDto[];
}

export class CostGroupDto implements ICostGroupDto {
    id?: number;
    costCategoryId?: number;
    title?: string | undefined;
    code?: string | undefined;
    items?: CostTypeDto[];

    constructor(data?: ICostGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.costCategoryId = _data["costCategoryId"];
            this.title = _data["title"];
            this.code = _data["code"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CostTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["costCategoryId"] = this.costCategoryId;
        data["title"] = this.title;
        data["code"] = this.code;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICostGroupDto {
    id?: number;
    costCategoryId?: number;
    title?: string | undefined;
    code?: string | undefined;
    items?: CostTypeDto[];
}

export class CostTypeDto implements ICostTypeDto {
    id?: number;
    costGroupId?: number;
    code?: string | undefined;
    title?: string | undefined;

    constructor(data?: ICostTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.costGroupId = _data["costGroupId"];
            this.code = _data["code"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CostTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CostTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["costGroupId"] = this.costGroupId;
        data["code"] = this.code;
        data["title"] = this.title;
        return data;
    }
}

export interface ICostTypeDto {
    id?: number;
    costGroupId?: number;
    code?: string | undefined;
    title?: string | undefined;
}

export class CreateCostCategoryCommand implements ICreateCostCategoryCommand {
    title?: string;
    code?: string;

    constructor(data?: ICreateCostCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateCostCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCostCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["code"] = this.code;
        return data;
    }
}

export interface ICreateCostCategoryCommand {
    title?: string;
    code?: string;
}

export class UpdateCostCategoryCommand implements IUpdateCostCategoryCommand {
    id?: number;
    title?: string | undefined;
    code?: string;

    constructor(data?: IUpdateCostCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UpdateCostCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCostCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["code"] = this.code;
        return data;
    }
}

export interface IUpdateCostCategoryCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
}

export class CreateCostGroupCommand implements ICreateCostGroupCommand {
    costCategoryId?: number;
    title?: string | undefined;
    code?: string;

    constructor(data?: ICreateCostGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costCategoryId = _data["costCategoryId"];
            this.title = _data["title"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateCostGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCostGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costCategoryId"] = this.costCategoryId;
        data["title"] = this.title;
        data["code"] = this.code;
        return data;
    }
}

export interface ICreateCostGroupCommand {
    costCategoryId?: number;
    title?: string | undefined;
    code?: string;
}

export class UpdateCostGroupCommand implements IUpdateCostGroupCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
    costCategoryId?: number;

    constructor(data?: IUpdateCostGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.code = _data["code"];
            this.costCategoryId = _data["costCategoryId"];
        }
    }

    static fromJS(data: any): UpdateCostGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCostGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["code"] = this.code;
        data["costCategoryId"] = this.costCategoryId;
        return data;
    }
}

export interface IUpdateCostGroupCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
    costCategoryId?: number;
}

export class PaginatedListOfCostTypeDto implements IPaginatedListOfCostTypeDto {
    items?: CostTypeDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfCostTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CostTypeDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfCostTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfCostTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfCostTypeDto {
    items?: CostTypeDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class GetCostTypesWithPaginationQuery implements IGetCostTypesWithPaginationQuery {
    costGroupId?: number;
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IGetCostTypesWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costGroupId = _data["costGroupId"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): GetCostTypesWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCostTypesWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costGroupId"] = this.costGroupId;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IGetCostTypesWithPaginationQuery {
    costGroupId?: number;
    pageNumber?: number;
    pageSize?: number;
}

export class CreateCostTypeCommand implements ICreateCostTypeCommand {
    costGroupId?: number;
    code?: string;
    title?: string | undefined;

    constructor(data?: ICreateCostTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costGroupId = _data["costGroupId"];
            this.code = _data["code"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateCostTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCostTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costGroupId"] = this.costGroupId;
        data["code"] = this.code;
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateCostTypeCommand {
    costGroupId?: number;
    code?: string;
    title?: string | undefined;
}

export class UpdateCostTypeCommand implements IUpdateCostTypeCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
    costGroupId?: number;

    constructor(data?: IUpdateCostTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.code = _data["code"];
            this.costGroupId = _data["costGroupId"];
        }
    }

    static fromJS(data: any): UpdateCostTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCostTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["code"] = this.code;
        data["costGroupId"] = this.costGroupId;
        return data;
    }
}

export interface IUpdateCostTypeCommand {
    id?: number;
    title?: string | undefined;
    code?: string;
    costGroupId?: number;
}

export class PaginatedListOfVoucherDto implements IPaginatedListOfVoucherDto {
    items?: VoucherDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfVoucherDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(VoucherDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfVoucherDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfVoucherDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfVoucherDto {
    items?: VoucherDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class VoucherDto implements IVoucherDto {
    id?: number;
    costTypeId?: number;
    voucherDate?: Date | undefined;
    beneficiaryId?: number;
    cost?: number;
    description?: string | undefined;
    companyName?: string | undefined;
    accountTitle?: string | undefined;
    accountCode?: string | undefined;
    voucherNumber?: number;

    constructor(data?: IVoucherDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.costTypeId = _data["costTypeId"];
            this.voucherDate = _data["voucherDate"] ? new Date(_data["voucherDate"].toString()) : <any>undefined;
            this.beneficiaryId = _data["beneficiaryId"];
            this.cost = _data["cost"];
            this.description = _data["description"];
            this.companyName = _data["companyName"];
            this.accountTitle = _data["accountTitle"];
            this.accountCode = _data["accountCode"];
            this.voucherNumber = _data["voucherNumber"];
        }
    }

    static fromJS(data: any): VoucherDto {
        data = typeof data === 'object' ? data : {};
        let result = new VoucherDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["costTypeId"] = this.costTypeId;
        data["voucherDate"] = this.voucherDate ? this.voucherDate.toISOString() : <any>undefined;
        data["beneficiaryId"] = this.beneficiaryId;
        data["cost"] = this.cost;
        data["description"] = this.description;
        data["companyName"] = this.companyName;
        data["accountTitle"] = this.accountTitle;
        data["accountCode"] = this.accountCode;
        data["voucherNumber"] = this.voucherNumber;
        return data;
    }
}

export interface IVoucherDto {
    id?: number;
    costTypeId?: number;
    voucherDate?: Date | undefined;
    beneficiaryId?: number;
    cost?: number;
    description?: string | undefined;
    companyName?: string | undefined;
    accountTitle?: string | undefined;
    accountCode?: string | undefined;
    voucherNumber?: number;
}

export class GetVouchersWithPaginationQuery implements IGetVouchersWithPaginationQuery {
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IGetVouchersWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): GetVouchersWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetVouchersWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IGetVouchersWithPaginationQuery {
    pageNumber?: number;
    pageSize?: number;
}

export class GetVouchersByBeneficiayWithPaginationQuery implements IGetVouchersByBeneficiayWithPaginationQuery {
    beneficiaryId?: number;
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IGetVouchersByBeneficiayWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beneficiaryId = _data["beneficiaryId"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): GetVouchersByBeneficiayWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetVouchersByBeneficiayWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beneficiaryId"] = this.beneficiaryId;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IGetVouchersByBeneficiayWithPaginationQuery {
    beneficiaryId?: number;
    pageNumber?: number;
    pageSize?: number;
}

export class GetVouchersByCostTypeWithPaginationQuery implements IGetVouchersByCostTypeWithPaginationQuery {
    costTypeId?: number;
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IGetVouchersByCostTypeWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costTypeId = _data["costTypeId"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): GetVouchersByCostTypeWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetVouchersByCostTypeWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costTypeId"] = this.costTypeId;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IGetVouchersByCostTypeWithPaginationQuery {
    costTypeId?: number;
    pageNumber?: number;
    pageSize?: number;
}

export class CreateVoucherCommand implements ICreateVoucherCommand {
    costTypeId?: number;
    voucherDate?: Date | undefined;
    beneficiaryId?: number;
    amount?: number;
    description?: string | undefined;
    companyName?: string | undefined;
    accountTitle?: string | undefined;
    accountCode?: string | undefined;
    voucherNumber?: number;
    location?: Location;

    constructor(data?: ICreateVoucherCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costTypeId = _data["costTypeId"];
            this.voucherDate = _data["voucherDate"] ? new Date(_data["voucherDate"].toString()) : <any>undefined;
            this.beneficiaryId = _data["beneficiaryId"];
            this.amount = _data["amount"];
            this.description = _data["description"];
            this.companyName = _data["companyName"];
            this.accountTitle = _data["accountTitle"];
            this.accountCode = _data["accountCode"];
            this.voucherNumber = _data["voucherNumber"];
            this.location = _data["location"];
        }
    }

    static fromJS(data: any): CreateVoucherCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVoucherCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costTypeId"] = this.costTypeId;
        data["voucherDate"] = this.voucherDate ? this.voucherDate.toISOString() : <any>undefined;
        data["beneficiaryId"] = this.beneficiaryId;
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["companyName"] = this.companyName;
        data["accountTitle"] = this.accountTitle;
        data["accountCode"] = this.accountCode;
        data["voucherNumber"] = this.voucherNumber;
        data["location"] = this.location;
        return data;
    }
}

export interface ICreateVoucherCommand {
    costTypeId?: number;
    voucherDate?: Date | undefined;
    beneficiaryId?: number;
    amount?: number;
    description?: string | undefined;
    companyName?: string | undefined;
    accountTitle?: string | undefined;
    accountCode?: string | undefined;
    voucherNumber?: number;
    location?: Location;
}

export class UpdateVoucherCommand implements IUpdateVoucherCommand {
    id?: number;
    costTypeId?: number;
    voucherDate?: Date | undefined;
    beneficiaryId?: number;
    amount?: number;
    description?: string | undefined;
    companyName?: string | undefined;
    accountTitle?: string | undefined;
    accountCode?: string | undefined;
    voucherNumber?: number;
    location?: Location;

    constructor(data?: IUpdateVoucherCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.costTypeId = _data["costTypeId"];
            this.voucherDate = _data["voucherDate"] ? new Date(_data["voucherDate"].toString()) : <any>undefined;
            this.beneficiaryId = _data["beneficiaryId"];
            this.amount = _data["amount"];
            this.description = _data["description"];
            this.companyName = _data["companyName"];
            this.accountTitle = _data["accountTitle"];
            this.accountCode = _data["accountCode"];
            this.voucherNumber = _data["voucherNumber"];
            this.location = _data["location"];
        }
    }

    static fromJS(data: any): UpdateVoucherCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateVoucherCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["costTypeId"] = this.costTypeId;
        data["voucherDate"] = this.voucherDate ? this.voucherDate.toISOString() : <any>undefined;
        data["beneficiaryId"] = this.beneficiaryId;
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["companyName"] = this.companyName;
        data["accountTitle"] = this.accountTitle;
        data["accountCode"] = this.accountCode;
        data["voucherNumber"] = this.voucherNumber;
        data["location"] = this.location;
        return data;
    }
}

export interface IUpdateVoucherCommand {
    id?: number;
    costTypeId?: number;
    voucherDate?: Date | undefined;
    beneficiaryId?: number;
    amount?: number;
    description?: string | undefined;
    companyName?: string | undefined;
    accountTitle?: string | undefined;
    accountCode?: string | undefined;
    voucherNumber?: number;
    location?: Location;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}